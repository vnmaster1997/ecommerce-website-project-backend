swagger: "2.0"
info:
  version: 1.0.0
  title: x-commerce
  description: My cool app
basePath: /api/v1
tags:
  - name: Examples
    description: Simple example endpoints
  - name: Specification
    description: The swagger API specification

consumes:
  - application/json
produces:
  - application/json


definitions:
  ExampleBody:
    type: object
    title: example
    required:
      - name
    properties:
      name:
        type: string
        example: no_stress
  AuthBody:
    type: object
    title: auth
    properties:
      username:
        type: string
      password:
        type: string

  UserBody:
    type: object
    tilte: user information
    properties:
      username:
        type: string
        unique: true
        example: "admin"
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
        example: "admin"
      phone:
        type: string
    


  ProductBody:
    type: object
    title: product information
    properties:
      category:
        type: string
        example: aa
      name: 
        type: string
        example: Cake
      photoUrls:
        type: array
        items:
          type: string
          example: aaaa
      price:
        type: number
      status:
        type: string
        description: cake status in store
        enum:
          - available
          - pending
          - sold
      
  CheckoutBody:
    type: object
    title: payment information
    properties: 
      firstname:
        type: string
        example: Nguyen
      lastname:
        type: string
        example: Nam
      company:
        type: string
        example: PTIT
      country: 
        type: string
        example: Viet Nam
      street:
        type: string
        example: Nguyen Trai
      postcode:
        type: number
        example: 10000
      city:
        type: string
        example: Ha Noi
      phone: 
        type: string
        example: 0912345678
      email:
        type: string
        example: namnv537@gmail.com
      listProduct:
        type: array
        items:
          type: object
          properties:
            productId:
              type: string
            quantity: 
              type: number
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order status
        enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
        
paths:
  /examples:
    get:
      tags:
        - Examples
      description: Fetch all examples
      responses:
        200:
          description: Returns all examples
    post:
      tags:
        - Examples
      description: Create a new example
      parameters:
        - name: example
          in: body
          description: an example
          required: true
          schema: 
            $ref: "#/definitions/ExampleBody"
      responses:
        200:
          description: Returns all examples

  /examples/{id}:
    get:
      tags:
        - Examples
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the example to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not found


  /user:
    get:
      tags:
        - Users
      summary: Get All Users
      description: Fetch All Users
      responses:
        200:
          description: Return All users
    post:
      tags: 
        - Users
      summary: Create user
      description: This can only be done by the logged in user
      parameters:
      - name: body
        in: body
        description: Created user object
        required: true
        schema:
          $ref: "#/definitions/UserBody"
      responses:
        200:
          description: "successful post a user"
        default:
          description: "successful operation"

  /user/{userId}:
    get:
      tags:
        - Users
      summary: Get users by Name
      description:
      parameters:
        - name: userId         
          in: path
          description: The name that need to be fetched. User user1 for testing
          require: true
          type: string
      responses:
        200:
          description: successfull get user
        400:
          description: invalid username supplied
        404:
          description: user not found  

    put:
      tags:
        - Users
      summary: updated user
      description: This can only be done by logged in user
      parameters:
        - name: userId
          in: path
          description: name that need to be updated
          required: true
          type: string
        - name: body
          in: body
          description: Updated user object
          required: true
          schema: 
            $ref: "#/definitions/UserBody"
      responses:
        400:
          description: Invalid user supplied
        404:
          description: user not found
    
    delete:
      tags:
        - Users
      summary: Delete user
      description: This can only be done by logged in user
      parameters:
        - name: userId
          in: path
          description: The name that need to be deleted
          required: true
          type: string
      response:
        400: 
          description: Invalid user supplied
        404:
          description: user not found

  /auth:
    get:
      tags:
        - Authentication
      summary: Get info auth
      description: Get infor user login
      responses:
        200:
          description: successful operation

    post:
      tags:
        - Authentication
      summary: Logs user into the system
      description: Login user
      parameters:
      - name: auth
        in: body
        description: The password for login in clear text
        type: object
        schema:
          $ref: "#/definitions/AuthBody"
      responses:
        200:
          description: successfull operation
        404:
          description: Invalid username/password supplied
    # delete:
    #   tags:
    #     - Authentication
    #   summary: Logs out current logged in user session
    #   description: 
    #     responses:
    #     200: 
    #       description: return home
    #     default:
    #       description: successful operation
  
  /product:
    get:
      tags: 
        - Products
      summary: Get all Products
      description: Fetch All Products
      parameters:
        - name: status
          in: query
          description: status values that need to be considered for filter
          type: array
          items:
            type: string
            enum: 
              - available
              - pending
              - sold
            default: available
          collectionFormat: multi
        - name: tags
          in: query
          description: Tags to filter by
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: page
          in: query
          description: page 
          items:
            type: number 
        - name: limit
          in: query
          description: limit
          items:
            type: number
        - name: minPrice
          in: query
          description: minPrice
          items: 
            type: number
        - name: maxPrice
          in: query
          description: maxPrice
          items:
            type: number
          
      responses:
        200:
          description: succesful operation
    post:
      tags:
        - Products
      summary: Add a new Product to store
      description: ""
      parameters:
        - name: body
          in: body
          description: Product object that needs to be added to the store
          schema:
            $ref: "#/definitions/ProductBody"
      responses:
        405:
          description: invalid input
    
  /product/{productId}:
    get:
      tags:
        - Products
      summary: Find Product by id
      description: Return a single Product
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          type: string
      responses:
        200: 
          description: Successful operation
          schema:
            $ref: "#/definitions/ProductBody"
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
      
    put:
      tags:
        - Products
      summary: Update a product in store with formdata
      description: ""
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to updated
          required: true
          type: string
        - name: product
          in: body
          description: Product object that needs to be added to the store
          required: true
          schema:
            $ref: "#/definitions/ProductBody"
       
      responses: 
        405:
          description: Invalid input

    delete:
      tags:
        - Products
      summary: Delete a product
      description: ""
      parameters:
        - name: productId
          in: path
          description: ProductId to delete
          required: true
          type: string
        
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Product not found


  /image:
    post:
      tags:
        - Images
      summary: Uploads an image
      description: ""
      parameters:
        - name: file
          in: formData
          description: file to upload
          required: false
          type: file
      responses: 
        200:
          description: successful operation
                
  /order:
    get:
      tags:
        - Orders
      summary: Get All order
      description: Fetch All order
      responses:
        200: 
          description: successful operation
        400:
          description: Invalid
    post:
      tags:
        - Orders
      summary: Place an order
      description: ""
      parameters:
        - name: body
          in: body
          description: Created a order
          required: true
          schema:
            $ref: "#/definitions/CheckoutBody"
      responses:
        200:
          description: Successful operation
        400: 
          description: Invalid Order

  /order/{orderId}:
    get:
      tags:
        - Orders
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions
      parameters:
        - name: orderId
          in: path
          description: ID of product that needs to be fetched
          required: true
          type: string  
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/CheckoutBody"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      tags:
        - Orders
      summary: Delete purchase order by Id
      description: ""
      parameters:
        - name: orderId
          in: path
          description: ID of product that needs to be deleted
          required: true
          type: string
          
      responses:
        200:
          description: Delete an order by orderId successfully
        400:
          description: Invalid ID supplied
        404:
          description: Order not found

  

  /spec:
    get:
      tags:
        - Specification
      responses:
        200:
          description: Return the API specification